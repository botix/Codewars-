// function solution(numbers) {

    
    
//     function x(){   
//         howManyPasses++
//         let counter = 0;
//         let factor
//         let productionFactor
//         let myArr
      
        
//         numbers.sort((a,b) => b - a)
        
//         console.log(numbers)
//         const lastNumberInArray = numbers[numbers.length -1]
//         if( numbers.every(num =>{
//             return num % (lastNumberInArray) === 0
            
//         })){
//           myArr =  numbers.map(num =>{
              
//               if(num > lastNumberInArray ){
//                 return  num / (num/lastNumberInArray)
//               }else{
//                 return num
//               } 
//             })
//             numbers = myArr
//         }
        

//         factor = numbers[0] / numbers[1]

//         factor === 2 ? productionFactor = 1 : productionFactor = Math.floor(factor)
//         console.log(numbers)

//         for(let i = 0; i < numbers.length; i++){
        

//             if(numbers[i] > numbers[i+1]){
//                 let factorCalculation = numbers[i] - ((productionFactor) * numbers[i+1])
//                 let normalCalculation = numbers[i] - numbers[i+1]

//                 factorCalculation === 0 ? factorCalculation = normalCalculation : factorCalculation

//                 i==0 ? numbers[i] = factorCalculation : numbers[i] = normalCalculation

//                 counter++
//             }
          
//         }
       
//         console.log(numbers)
//         console.log("-----------------------")
//         if(counter !== 0) x()
//     }
//     x()
//     return numbers.reduce((num, sum) => sum += num)
// }

// let howManyPasses = 0;
// const result = solution([306422348, 263960768, 163742912, 182657792, 22, 6454383, 39116592, 29850368, 21168128, 138998528, 62532800, 110161088, 110916908, 311476652, 12156428, 110161088, 130652208, 83354672, 16206848, 156466368, 49633472, 314019308, 55360908, 159175692, 86000688, 106420748, 251269452, 82699628, 4497452, 199548108, 29850368, 142409408])

// console.log(result)
// console.log(howManyPasses)
// //[306422348, 263960768, 163742912, 182657792, 142409408]
// //solution([306422348, 263960768, 163742912, 182657792, 22, 6454383, 39116592, 29850368, 21168128, 138998528, 62532800, 110161088, 110916908, 311476652, 12156428, 110161088, 130652208, 83354672, 16206848, 156466368, 49633472, 314019308, 55360908, 159175692, 86000688, 106420748, 251269452, 82699628, 4497452, 199548108, 29850368, 142409408])




console.time()
function solution(numbers) {
    let answer = 0;
    let pholder;
    const length = numbers.length
    let modulo

    function x(){   
        let counter = 0;
        howManyPasses++
     
       
        numbers.sort((a, b) => b - a)     
        let largest = numbers[0] 
        let secondLargest = numbers[1] 
  
        if(largest > secondLargest){
           
            modulo = largest % secondLargest
            modulo === 0 ? numbers[0] = numbers[1] : numbers[0] = modulo
        }
        else if(largest === secondLargest){
            
            const condition = numbers.some(num =>{
                                pholder = num
                                return num !== largest
                                })
            
            if(condition){

                numbers[0] = numbers[0] - pholder  
            }
            else{
                counter = 1
            }
        
        }
        else{
            counter = 1;
        }
 

       
        
        
        console.log(numbers)
        if(counter !== 1) x()
    }

   
     x()
    console.log(pholder)
    return answer === 1 ? length : numbers.reduce((num, sum) => sum += num)
}


let howManyPasses = 0;
const result = solution([306422348, 263960768, 163742912, 182657792, 142409408])
const result = solution([238144,
    20449,
    234256,
    232324,
    11881,
    242064,
    8100,
    244036,
    173056,
    12996,
    5476,
    165649,
    44521,
    52441,
    94249,
    53361,
    103041,
    161604,
    156025,
    169744,
    202500,
    108241,
    107584,
    184900,
    32761,
    233289,
    50176,
    12321,
    147456,
    200704,
    86436,
    192721,
    69696,
    108241,
    55225,
    10201,
    216225,
    38025,
    235225,
    191844,
    221841,
    199809,
    97969,
    111556,
    173056,
    10816,
    116964,
    62500,
    36100,
    142884,
    159201,
    25281,
    73441,
    190096,
    11881,
    81796,
    207025,
    141376,
    223729,
    32400,
    25281,
    30276,
    58564,
    89401,
    196249,
    75625,
    10000,
    25281,
    40804,
    100489,
    23409,
    223729,
    3481,
    64516,
    34225,
    126736,
    208849,
    22201,
    148225,
    112225,
    64516,
    42436,
    106276,
    42849,
    42025,
    104329,
    160801,
    213444,
    40401,
    28900,
    70225,
    137641,
    61504,
    7225,
    3249,
    9604,
    11449,
    126025,
    36481,
    10000])
//const result = solution ([6159168, 6189397, 7065853, 1450548, 568912, 1031893, 1974357, 843637, 7761268, 4715613, 959077, 625300, 6189397, 6311053, 4821877, 3509968, 3464532, 6937093, 810448, 3487213, 3176413, 2368333, 124468, 7897428, 1435933, 197173, 5037957, 6433893, 6526800, 1107373, 2617972, 4202053, 1133125, 100048, 8595988, 6403072, 5685568, 2617972, 6098932, 5920000, 4506637, 5772925, 2838973, 7761268, 8348125, 3555700, 1823508, 4610533, 5120208, 5920000, 900432, 2880117, 4902352, 2424832, 1839973, 7761268, 1198800, 8489317, 2043325, 694453, 832500, 587412, 423613, 4053757, 684352, 362637, 489325, 2818512, 4252077, 5370957, 3860173, 191808, 6129013, 3464532, 6341652, 7001325, 550708, 3068928, 2963293, 4821877, 111925, 7829200, 1069300, 8883700, 1185517, 6250077, 1631700, 1019572])

console.log(result)
console.log(howManyPasses)
console.timeEnd()

//solution([306422348, 263960768, 163742912, 182657792, 22, 6454383, 39116592, 29850368, 21168128, 138998528, 62532800, 110161088, 110916908, 311476652, 12156428, 110161088, 130652208, 83354672, 16206848, 156466368, 49633472, 314019308, 55360908, 159175692, 86000688, 106420748, 251269452, 82699628, 4497452, 199548108, 29850368, 142409408])
// 6159168, 6189397, 7065853, 1450548, 568912, 1031893, 1974357, 843637, 7761268, 4715613, 959077, 625300, 6189397, 6311053, 4821877, 3509968, 3464532, 6937093, 810448, 3487213, 3176413, 2368333, 124468, 7897428, 1435933, 197173, 5037957, 6433893, 6526800, 1107373, 2617972, 4202053, 1133125, 100048, 8595988, 6403072, 5685568, 2617972, 6098932, 5920000, 4506637, 5772925, 2838973, 7761268, 8348125, 3555700, 1823508, 4610533, 5120208, 5920000, 900432, 2880117, 4902352, 2424832, 1839973, 7761268, 1198800, 8489317, 2043325, 694453, 832500, 587412, 423613, 4053757, 684352, 362637, 489325, 2818512, 4252077, 5370957, 3860173, 191808, 6129013, 3464532, 6341652, 7001325, 550708, 3068928, 2963293, 4821877, 111925, 7829200, 1069300, 8883700, 1185517, 6250077, 1631700, 1019572